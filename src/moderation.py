import asyncio
import csv
import datetime
import logging
import os
import traceback
import asyncio
import datetime
import logging
from database import *
from config import *
from database import insert_chat, insert_user, insert_message, insert_reaction, log_event, connect_db


async def is_admin(client, chat_id, user_id):
    try:
        participant = await client.get_permissions(chat_id, user_id)
        return participant.is_admin
    except Exception:
        return False
def parse_duration(duration_str):
    unit = duration_str[-1]
    value = int(duration_str[:-1])

    if unit == 'm':
        return datetime.timedelta(minutes=value)
    elif unit == 'h':
        return datetime.timedelta(hours=value)
    elif unit == 'd':
        return datetime.timedelta(days=value)
    else:
        return datetime.timedelta(minutes=30)
async def resolve_user(client, user_ref):
    try:
        if user_ref.startswith('@'):
            return await client.get_entity(user_ref)
        elif user_ref.isdigit():
            return await client.get_entity(int(user_ref))
        else:
            try:
                return await client.get_entity(int(user_ref))
            except ValueError:
                return None
    except Exception:
        return None
async def mute_handler(event):
    cursor = get_cursor()
    conn = get_conn()
    try:
        sender = await event.get_sender()
        chat = await event.get_chat()

        if not await is_admin(event.client, chat.id, sender.id):
            await event.respond("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return

        user_ref = event.pattern_match.group(1).strip()
        time_input = event.pattern_match.group(2).strip()
        reason = event.pattern_match.group(3).strip() or "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"

        user = await resolve_user(event.client, user_ref)
        if not user:
            await event.respond("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if user.id == CREATOR_ID:
            await event.respond("üö´ –Ø –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç—É–ø–∏—Ç—å —Ç–∞–∫ —Å–æ —Å–≤–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º! üò¢")
            return

        if await is_admin(event.client, chat.id, user.id):
            await event.respond("‚õî –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        duration = parse_duration(time_input)
        end_time = datetime.datetime.now() + duration

        cursor.execute(
            "INSERT INTO mutes (chat_id, user_id, end_time, reason, moderator_id) VALUES (?, ?, ?, ?, ?)",
            (chat.id, user.id, end_time, reason, sender.id)
        )
        conn.commit()

        await event.client.edit_permissions(
            entity=chat.id,
            user=user.id,
            until_date=end_time,
            send_messages=False,
            send_media=False,
            send_stickers=False,
            send_gifs=False,
            send_games=False,
            send_polls=False
        )

        time_format = end_time.strftime('%d.%m.%Y %H:%M')
        response = (
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –æ—Ç–ª–µ—Ç–∞–µ—Ç –≤ –º—É—Ç! "
            f"‚è≥ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time_format}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"

            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{sender.username}"
        )

        await event.respond(response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º—É—Ç–∞: {str(e)}\n{traceback.format_exc()}")
        await event.respond("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
async def unmute_handler(event):
    cursor = get_cursor()
    conn = get_conn()
    try:
        sender = await event.get_sender()
        chat = await event.get_chat()

        if not await is_admin(event.client, chat.id, sender.id):
            await event.respond("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return

        user_ref = event.pattern_match.group(1).strip()
        user = await resolve_user(event.client, user_ref)
        if not user:
            await event.respond("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if user.id == CREATOR_ID:
            await event.respond("üö´ –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ —Å–≤–æ–±–æ–¥–µ–Ω! üòá")
            return

        await event.client.edit_permissions(
            entity=chat.id,
            user=user.id,
            send_messages=True,
            send_media=True,
            send_stickers=True,
            send_gifs=True,
            send_games=True,
            send_polls=True
        )
        cursor.execute(
            "UPDATE mutes SET end_time = datetime('now') WHERE chat_id = ? AND user_id = ? AND end_time > datetime('now')",
            (chat.id, user.id)
        )
        conn.commit()

        await event.respond(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —Ä–∞–∑–º—É—á–µ–Ω")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º—É—Ç–∞: {str(e)}\n{traceback.format_exc()}")
        await event.respond("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def check_mute(event):
    cursor = get_cursor()
    conn = get_conn()
    if event.message.out:
        return
    if await check_user_muted(event):
        return
    if event.message.action or event.message.text.startswith('/'):
        return
    try:
        if event.message.action:
            return
        if not hasattr(event, 'sender') or not hasattr(event.sender, 'id'):
            return
        if await is_admin(event.client, event.chat_id, event.sender.id):
            return
        cursor.execute(
            "SELECT 1 FROM mutes WHERE chat_id = ? AND user_id = ? AND end_time > datetime('now')",
            (event.chat_id, event.sender.id)
        )
        if cursor.fetchone():
            await event.delete()
            try:
                await event.respond(
                    f"‚ö†Ô∏è {event.sender.first_name}, –≤—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                    reply_to=event.message.id
                )
            except:
                pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É—Ç–∞: {str(e)}\n{traceback.format_exc()}")
async def check_user_muted(event):
    cursor = get_cursor()
    conn = get_conn()
    if event.sender.id == CREATOR_ID:
        return False
    cursor.execute(
        "SELECT 1 FROM mutes WHERE chat_id = ? AND user_id = ? AND end_time > datetime('now')",
        (event.chat_id, event.sender.id)
    )
    if cursor.fetchone():
        await event.delete()
        try:
            await event.respond(f"‚ö†Ô∏è {event.sender.first_name}, –≤—ã –≤ –º—É—Ç–µ!", reply_to=event.message.id)
        except:
            pass
        return True
    return False
async def check_expired_mutes(client):
    cursor = get_cursor()
    conn = get_conn()
    while True:
        try:
            cursor.execute(
                "SELECT mute_id, chat_id, user_id FROM mutes WHERE end_time <= datetime('now')"
            )
            expired = cursor.fetchall()

            for mute in expired:
                mute_id, chat_id, user_id = mute
                try:
                    await client.edit_permissions(
                        entity=chat_id,
                        user=user_id,
                        send_messages=True
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ {mute_id}: {str(e)}")
                cursor.execute("DELETE FROM mutes WHERE mute_id = ?", (mute_id,))

            conn.commit()
            await asyncio.sleep(60)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É—Ç–æ–≤: {str(e)}")
            await asyncio.sleep(60)
async def mute_list_handler(event):
    cursor = get_cursor()
    conn = get_conn()
    try:
        sender = await event.get_sender()
        chat = await event.get_chat()

        if not await is_admin(event.client, chat.id, sender.id):
            await event.respond("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return

        cursor.execute(
            "SELECT user_id, end_time, reason FROM mutes WHERE chat_id = ? AND end_time > datetime('now')",
            (chat.id,)
        )
        mutes = cursor.fetchall()

        if not mutes:
            await event.respond("‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º—É—Ç–æ–≤")
            return

        response = ["üîá –ê–∫—Ç–∏–≤–Ω—ã–µ –º—É—Ç—ã:"]

        for user_id, end_time, reason in mutes:
            try:
                user = await event.client.get_entity(user_id)
                user_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
                time_str = datetime.datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S").strftime('%d.%m.%Y %H:%M')
                response.append(f"üë§ {user_name} (@{user.username or '–Ω–µ—Ç'})\n"
                                f"‚åõ –î–æ: {time_str}\n"
                                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                                f"‚îÄ‚îÄ")
            except:
                response.append(f"üë§ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})\n"
                                f"‚åõ –î–æ: {end_time}\n"
                                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                                f"‚îÄ‚îÄ")

        full_text = "\n".join(response)
        for i in range(0, len(full_text), 4096):
            await event.respond(full_text[i:i + 4096])

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –º—É—Ç–æ–≤: {str(e)}\n{traceback.format_exc()}")
        await event.respond("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
async def kick_handler(event):
    cursor = get_cursor()
    conn = get_conn()
    try:
        sender = await event.get_sender()
        chat = await event.get_chat()

        if not await is_admin(event.client, chat.id, sender.id):
            await event.respond("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return

        user_ref = event.pattern_match.group(1).strip()
        reason = event.pattern_match.group(2).strip() or "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"

        user = await resolve_user(event.client, user_ref)
        if not user:
            await event.respond("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if user.id == CREATOR_ID:
            await event.respond("üö´ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–∞–º —Å–≤–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è! ü§ñ‚ù§Ô∏è")
            return

        if await is_admin(event.client, chat.id, user.id):
            await event.respond("‚õî –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await event.client.kick_participant(chat.id, user.id)

        response = (
            f"üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {sender.first_name}"
        )

        await event.respond(response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–∏–∫–∞: {str(e)}\n{traceback.format_exc()}")
        await event.respond("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

PROFANITY_LIST = ["–∫–æ–ª—è", "–¥—É—Ä–∞–∫", "–∫–∏—Å"]

async def handle_profanity(event):
    cursor = get_cursor()
    conn = get_conn()
    automod_enabled = get_automod_status(cursor, event.chat_id)

    if not automod_enabled:
        logging.info("–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        return

    if event.message.action or event.message.text.startswith('/'):
        return

    try:
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {event.chat_id}: {event.message.text}")

        message_text = event.message.text.lower()
        contains_profanity = any(word in message_text for word in PROFANITY_LIST)

        if contains_profanity:
            violation_count = await add_violation(cursor, event.sender.id, event.chat_id)
            logging.info(f"Violation count: {violation_count} for user: {event.sender.id}")
            deleted = False
            muted = False
            response = ""

            try:
                await event.delete()
                deleted = True
            except Exception:
                pass

            try:
                if not await is_admin(event.client, event.chat_id, event.sender.id):
                    mute_duration = datetime.timedelta(hours=violation_count)
                    end_time = datetime.datetime.now() + mute_duration

                    cursor.execute(
                        "INSERT INTO mutes (chat_id, user_id, end_time, reason, moderator_id) VALUES (?, ?, ?, ?, ?)",
                        (event.chat_id, event.sender.id, end_time, f"–ê–≤—Ç–æ-–º—É—Ç –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ #{violation_count}",
                         event.client.get_me().id)
                    )
                    conn.commit()

                    await event.client.edit_permissions(
                        entity=event.chat_id,
                        user=event.sender.id,
                        until_date=end_time,
                        send_messages=False
                    )
                    muted = True
            except Exception:
                pass

            user_name = event.sender.first_name
            if deleted and muted:
                response = f"ü§¨ {user_name}! –¢–≤–æ—ë —Å–∫–≤–µ—Ä–Ω–æ—Å–ª–æ–≤–∏–µ —Å—Ç—ë—Ä—Ç–æ, –∞ —Ç—ã –∑–∞–ø–µ—Ä—Ç –≤ –ø–æ–¥–≤–∞–ª–µ –Ω–∞ {violation_count} —á–∞—Å–æ–≤! –ü–æ–∑–æ—Ä–∏—â–µ!"
            elif deleted and not muted:
                response = f"ü§¨ {user_name}! –°—Ç–µ—Ä —Ç–≤–æ—é –º–µ—Ä–∑–æ—Å—Ç—å, –Ω–æ –∑–∞–ø–µ—Ä–µ—Ç—å –Ω–µ —Å–º–æ–≥! –ó–Ω–∞–π, —á—Ç–æ —Ç—ã - –ø–æ–∑–æ—Ä —Ä–æ–¥–∞!"
            elif not deleted and muted:
                response = f"ü§¨ {user_name}! –ù–µ —Å–º–æ–≥ —Å—Ç–µ—Ä–µ—Ç—å —Ç–≤–æ—é –ø–∞–∫–æ—Å—Ç—å, –Ω–æ –∑–∞—Ç–æ –∑–∞–ø—Ä—É –≤ –ø–æ–¥–≤–∞–ª–µ –Ω–∞ {violation_count} —á–∞—Å–æ–≤! –°—Ç—ã–¥–∏—Å—å!"
            else:
                response = f"ü§¨ {user_name}! –ù–∏ —Å—Ç–µ—Ä–µ—Ç—å —Ç–≤–æ—é –º–µ—Ä–∑–æ—Å—Ç—å, –Ω–∏ –∑–∞–ø–µ—Ä–µ—Ç—å —Ç–µ–±—è! –ù–æ –∑–Ω–∞–π - —Ç—ã –æ–ø–æ–∑–æ—Ä–∏–ª —Ä–æ–¥ –¥–æ –ø—è—Ç–æ–≥–æ –∫–æ–ª–µ–Ω–∞!"

            await event.respond(response)


    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {str(e)}")
        logging.error(traceback.format_exc())


async def automod_toggle_handler(event, enable: bool):
    cursor = get_cursor()
    conn = get_conn()
    sender = await event.get_sender()
    if sender.id not in TRUSTED_USER_IDS:
        await event.respond("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
        return

    chat = await event.get_chat()

    set_automod_status(cursor, chat.id, enable)
    logging.info(
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏: {'–í–ö–õ' if enable else '–í–´–ö–õ'} –≤ —á–∞—Ç–µ: {chat.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {sender.id}")

    status = "–≤–∫–ª—é—á–µ–Ω–∞" if enable else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    await event.respond(f"üõ°Ô∏è –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ {status}!")

async def automod_on_handler(event):
    await automod_toggle_handler(event, True)

async def automod_off_handler(event):
    await automod_toggle_handler(event, False)